//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
namespace Midas
{
    using Midas.Utils;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public class BaccaratDBContext : DbContext
    {
        public BaccaratDBContext()
            : base(StartApp.GlobalConnectionString)
        {

        }
    
        public virtual DbSet<Result> Results { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }


        /// <summary>
        /// Return new session ID
        /// </summary>
        /// <param name="session"></param>
        /// <returns></returns>
        public int AddSession(Session session)
        {
            Sessions.Add(session);
            SaveChanges();
            return session.ID; 
        }

        public void UpdateSession(Session session)
        {
            var current = Sessions.Find(session.ID);
            if (current == null)
                return;
            this.Entry(session).CurrentValues.SetValues(session);
            SaveChanges();
        }

        public void DeleteSession(int id)
        {
            var session = Sessions.Find(id);
            Sessions.Remove(session);
            SaveChanges();
        }


        public int AddResult(Result result)
        {
            Results.Add(result);
            SaveChanges();
            return result.ID;
        }

        public void UpdateResult(Result result)
        {
            var current = Results.Find(result.ID);
            if (current == null)
                return;
            this.Entry(result).CurrentValues.SetValues(result);
            SaveChanges();
        }

        public void DeleteResult(int id)
        {
            var result = Results.Find(id);
            Results.Remove(result);
            SaveChanges();
        }


    }
}
